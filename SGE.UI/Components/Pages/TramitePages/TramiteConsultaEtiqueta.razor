@page "/tramites/etiqueta/{IdEtiqueta:int}/{Page:int?}"
@rendermode InteractiveServer
@inject SesionActual Sesion
@inject CasoDeUsoUsuarioConsultaId ConsultaUsuario
@inject CasoDeUsoTramiteContarPorEtiqueta CasoContar
@inject CasoDeUsoTramiteConsultaEtiqueta ConsultaEtiqueta
@inject CasoDeUsoTramiteBaja CasoBaja
@inject NavigationManager Navigation
<PageTitle>SGE | Tramites</PageTitle>

<div class="div-container">
    @if (_tramites.Count > 0)
    {
        <table class="table text-white p-2 text-center">
            <thead>
                <tr>
                    <th class="text-start"># - Contenido (Etiqueta)</th>
                    <th>Expediente</th>
                    <th>Última Edición</th>
                    <th>Creado</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (Tramite t in _tramites)
                {
                    <tr>
                        <td class="text-start">#@t.Id - @t.Contenido<br>(@t.Etiqueta)</td>
                        <td>#@t.ExpedienteId</td>
                        <td>@GetName(t)<br>@t.FechayHoraMod</td>
                        <td>@t.FechayHoraCr</td>
                        <td>
                            <button class="btn btn-pencil" @onclick="() => Editar(t.Id)">
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="white" class="bi bi-pencil-fill" viewBox="0 0 16 16">
                                    <path d="M12.854.146a.5.5 0 0 0-.707 0L10.5 1.793 14.207 5.5l1.647-1.646a.5.5 0 0 0 0-.708zm.646 6.061L9.793 2.5 3.293 9H3.5a.5.5 0 0 1 .5.5v.5h.5a.5.5 0 0 1 .5.5v.5h.5a.5.5 0 0 1 .5.5v.5h.5a.5.5 0 0 1 .5.5v.207zm-7.468 7.468A.5.5 0 0 1 6 13.5V13h-.5a.5.5 0 0 1-.5-.5V12h-.5a.5.5 0 0 1-.5-.5V11h-.5a.5.5 0 0 1-.5-.5V10h-.5a.5.5 0 0 1-.175-.032l-.179.178a.5.5 0 0 0-.11.168l-2 5a.5.5 0 0 0 .65.65l5-2a.5.5 0 0 0 .168-.11z" />
                                </svg>
                            </button>
                            <button class="btn btn-danger" @onclick="() => Eliminar(t.Id)">
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash3-fill" viewBox="0 0 16 16">
                                    <path d="M11 1.5v1h3.5a.5.5 0 0 1 0 1h-.538l-.853 10.66A2 2 0 0 1 11.115 16h-6.23a2 2 0 0 1-1.994-1.84L2.038 3.5H1.5a.5.5 0 0 1 0-1H5v-1A1.5 1.5 0 0 1 6.5 0h3A1.5 1.5 0 0 1 11 1.5m-5 0v1h4v-1a.5.5 0 0 0-.5-.5h-3a.5.5 0 0 0-.5.5M4.5 5.029l.5 8.5a.5.5 0 1 0 .998-.06l-.5-8.5a.5.5 0 1 0-.998.06m6.53-.528a.5.5 0 0 0-.528.47l-.5 8.5a.5.5 0 0 0 .998.058l.5-8.5a.5.5 0 0 0-.47-.528M8 4.5a.5.5 0 0 0-.5.5v8.5a.5.5 0 0 0 1 0V5a.5.5 0 0 0-.5-.5" />
                                </svg>
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
        <nav class="nav">
            <span>Mostrando @(_cantTramites > 0 ? ((_page - 1) * 5) + 1 : "0") - @((_page * 5) < _cantTramites ? _page * 5 : _cantTramites) de @_cantTramites</span>
            @if (_cantPages > 1)
            {
                <ul>
                    <li>
                        <div class="element prev" href="#" @onclick="PreviousPage">
                            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-arrow-left-short" viewBox="0 0 16 16">
                                <path fill-rule="evenodd" d="M12 8a.5.5 0 0 1-.5.5H5.707l2.147 2.146a.5.5 0 0 1-.708.708l-3-3a.5.5 0 0 1 0-.708l3-3a.5.5 0 1 1 .708.708L5.707 7.5H11.5a.5.5 0 0 1 .5.5" />
                            </svg>
                        </div>
                    </li>
                    @for (int i = 1; i <= Math.Min(_cantPages, 5); i++)
                    {
                        if (i == _page)
                        {
                            <li>
                                <a class="element num-selected" href="@($"tramites/{i}")">@i</a>
                            </li>
                        }
                        else
                        {
                            <li>
                                <a class="element" href="@($"tramites/{i}")">@i</a>
                            </li>
                        }
                    }
                    <li>
                        <div class="element next" href="#" @onclick="NextPage">
                            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-arrow-right-short" viewBox="0 0 16 16">
                                <path fill-rule="evenodd" d="M4 8a.5.5 0 0 1 .5-.5h5.793L8.146 5.354a.5.5 0 1 1 .708-.708l3 3a.5.5 0 0 1 0 .708l-3 3a.5.5 0 0 1-.708-.708L10.293 8.5H4.5A.5.5 0 0 1 4 8" />
                            </svg>
                        </div>
                    </li>
                </ul>
            }
        </nav>
    }
    else
    {
        <h5>No existen tramites con la etiqueta seleccionada</h5>
    }
</div>

@code {
    [Parameter] public int IdEtiqueta { get; set; }
    [Parameter] public int? Page { get; set; }
    CuadroDialogo _dialogo = null!;
    List<Tramite> _tramites = [];
    string _error = "";
    int _page;
    int _cantTramites;
    int _cantPages;

    bool HasPrevious => _page > 1;
    bool HasNext => _page < _cantPages;
    void Agregar() => Navigation.NavigateTo("tramites/agregar");
    void Editar(int id) => Navigation.NavigateTo($"tramites/editar/{id}");
    string GetName(Tramite t)
    {
        try
        {
            return ConsultaUsuario.Ejecutar(t.IdUser).NombreCompleto;
        }
        catch
        {
            return "Usuario no encontrado";
        }
    }

    protected override void OnInitialized()
    {
        _page = Page ?? 1;
        _cantTramites = CasoContar.Ejecutar((EtiquetaTramite)IdEtiqueta);
        _cantPages = (int)Math.Ceiling(_cantTramites / 5.0);
        _tramites = ConsultaEtiqueta.Ejecutar((EtiquetaTramite)IdEtiqueta, _page);
    }

    protected override void OnParametersSet()
    {
        _page = Page ?? 1;
        if (_cantPages > 0 && _page > _cantPages)
        {
            Navigation.NavigateTo($"tramites/etiqueta/{IdEtiqueta}/{_cantPages}");
        }
        _tramites = ConsultaEtiqueta.Ejecutar((EtiquetaTramite)IdEtiqueta, _page);
    }

    void NextPage()
    {
        if (HasNext)
        {
            Page = _page + 1;
            Navigation.NavigateTo($"tramites/etiqueta/{IdEtiqueta}/{Page}");
        }
    }
    void PreviousPage()
    {
        if (HasPrevious)
        {
            Page = _page - 1;
            Navigation.NavigateTo($"tramites/etiqueta/{IdEtiqueta}/{Page}");
        }
    }

    void Eliminar(int id)
    {
        try
        {
            CasoBaja.Ejecutar(id, Sesion.User!);
            OnInitialized();
        }
        catch (Exception ex)
        {
            _error = ex.Message;
            _dialogo.Mostrar();
        }
    }

}

<style>
    .div-container {
        background-color: #1f2937;
        width: 65%;
        padding: 1.3rem 2rem;
        border-radius: 10px;
    }

    .head-container {
        display: flex;
        justify-content: space-between;
    }

    .filtro {
        background-color: #374151;
        color: white;
        border-radius: 0.5rem;
        padding: 10px 40px 10px 10px;
        height: 46px;
        width: 161px;
        cursor: pointer;
    }

    .btn {
        padding: .275rem .65rem;
    }

    .btn-pencil {
        background-color: #ff7e22;
    }

        .btn-pencil:hover {
            background-color: #c55d12;
        }

    .nav {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin: 0px auto;
        padding: 0.5rem;
    }

        .nav ul {
            display: inline-flex;
            align-items: stretch;
            margin-left: 1rem;
            margin-bottom: 0;
            list-style: none;
        }

    .element {
        display: flex;
        cursor: pointer;
        text-decoration: none;
        text-align: center;
        align-items: center;
        justify-content: center;
        height: 100%;
        padding: 0.50rem 0.75rem;
        margin-left: 0;
        color: rgb(156, 163, 175);
        background-color: #1f2937;
        border: 1px solid rgb(55, 65, 81);
    }

        .element:hover {
            color: white;
            background-color: rgb(55, 65, 81);
        }

    .prev {
        border-top-left-radius: 0.5rem;
        border-bottom-left-radius: 0.5rem;
    }

    .num-selected {
        color: white;
        background-color: rgb(55, 65, 81);
    }

    .next {
        border-top-right-radius: 0.5rem;
        border-bottom-right-radius: 0.5rem;
    }
</style>