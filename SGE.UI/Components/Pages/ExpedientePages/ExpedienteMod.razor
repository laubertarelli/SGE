@page "/expedientes/editar/{Id:int}"
@rendermode InteractiveServer
@inject CasoDeUsoExpedienteModificacion CasoDeUsoExpedienteModificacion
@inject CasoDeUsoExpedienteConsultaId ExpConsulta
@inject CasoDeUsoUsuarioConsultaId UsuarioConsulta
@inject NavigationManager Navigation
@inject SesionActual Sesion
<PageTitle>SGE | Expedientes</PageTitle>

    <form class="form">
        <p id="heading">Modificar Expediente #@e.Id</p>
        <div class="field">
            <input placeholder="Caratula" class="input" @bind="e.Caratula">
        </div>
        <div class="field">
            <select class="input" @bind="strEstado">
                <option value="" disabled selected>Seleccione un estado</option>
                <option>RecienIniciado</option>
                <option>ParaResolver</option>
                <option>ConResolucion</option>
                <option>EnNotificacion</option>
                <option>Finalizado</option>
            </select>
        </div>
        <div class="div-btn">
            <button class="button" @onclick="() => Modificar(e)">Guardar cambios</button>
        </div>
    </form>
    <CuadroDialogo @ref=dialogo Mensaje=@error />



@code {
    [Parameter] public int Id { get; set; }
    Usuario user = new();
    string error = "";
    Expediente e = new();
    string strEstado = "";
    CuadroDialogo dialogo = null!;

    protected override void OnInitialized()
    {
        try
        {
            // user = UsuarioConsulta.Ejecutar(Sesion.User.Id);
            e = ExpConsulta.Ejecutar(Id);
            e.Caratula = "";
        }
        catch (Exception ex)
        {
            error = ex.Message;
            // Navigation.NavigateTo("/home");
        }
    }

    void Modificar(Expediente e)
    {
        try
        {
            e.Estado = (EstadoExpediente)Enum.Parse(typeof(EstadoExpediente), strEstado);
            CasoDeUsoExpedienteModificacion.Ejecutar(e, Sesion.User);
            Navigation.NavigateTo($"/expedientes/lista");
            StateHasChanged();
        }
        catch (Exception ex)
        {
            error = ex.Message;
            if (error == "Must specify valid information for parsing in the string. (Parameter 'value')")
            {
                error = "Debe seleccionar un estado";
            }
            dialogo.Mostrar();
        }
    }
}

<style>
    .form {
        display: flex;
        flex-direction: column;
        gap: 10px;
        background-color: #1f2937;
        width: 420px;
        padding-left: 2em;
        padding-right: 2em;
        padding-bottom: 0.4em;
        border-radius: 10px;
    }

    #heading {
        text-align: center;
        margin: 2em;
        color: rgb(255, 255, 255);
        font-size: 1.2em;
    }

    .field {
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 0.5em;
        border-radius: 10px;
        padding: 0.6em;
        border: none;
        outline: none;
        color: white;
        background-color: #374151;
    }

    .input {
        background: none;
        border: none;
        outline: none;
        width: 100%;
        color: #d3d3d3;
    }

    option {
        background-color: #374151;
        color: #d3d3d3;
        padding: 1rem;
    }

    .div-btn {
        display: flex;
        justify-content: center;
        flex-direction: row;
        margin-top: 2.5em;
        padding: .375rem .75rem;
    }

    .button {
        padding: 0.5em;
        padding-left: 1.1em;
        padding-right: 1.1em;
        border-radius: 5px;
        border: none;
        outline: none;
        background-color: #2563EB;
        color: white;
    }
</style>
